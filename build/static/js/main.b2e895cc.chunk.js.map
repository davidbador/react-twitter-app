{"version":3,"sources":["Components/ProfilePage.module.css","Components/CreateTweet.module.css","Components/ListOfTweets.module.css","Components/NavBar.module.css","AppContext.js","Components/LoadingIndicator.jsx","Firestore.js","lib/FirestoreConnection.js","Components/CreateTweet.jsx","Components/ListOfTweets.jsx","Components/TweetsMainPage.jsx","Components/ProfilePage.jsx","Components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","userName","tweets","currentUserName","newName","handleOnTweetSubmit","value","LoadingIndicator","props","showLoading","className","style","color","display","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","sendTweetFirestore","msg","cbTurnOffSpinner","cbDisplayError","a","collection","add","response","CreateTweet","updateText","event","target","length","setState","buttonDisabled","showAlert","handleModalShow","error","showModal","modalText","handleModalClose","turnOffLoader","setTimeout","displayError","handleOnSubmit","fc","preventDefault","state","userRef","content","context","date","Date","toISOString","button","createRef","bind","Consumer","appContext","Form","onSubmit","FormGroup","styles","tweetFormGroup","tweetForm","Input","type","name","id","tweetFormInput","placeholder","onChange","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Button","variant","onClick","Alert","tweetFormAlert","disabled","tweetFormButton","Component","contextType","ListOfTweets","sort","b","map","el","index","tweetsListWrapper","key","width","Toast","ToastHeader","toastHeader","tweetName","ToastBody","toastBody","TweetsMainPage","ProfilePage","updateUserName","submitUserName","profilePageWrapper","profilePageForm","profilePageTitle","profilePageUserNameTitle","profilePageInput","profilePageButton","NavBar","navBarWrapper","Navbar","dark","expand","navBar","Nav","NavItem","exact","activeClassName","to","App","componentDidMount","loadTweets","interval","setInterval","get","data","docs","doc","savedName","localStorage","getItem","heldName","JSON","parse","this","local","setItem","stringify","clearInterval","path","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b2e895cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePageWrapper\":\"ProfilePage_profilePageWrapper__onBvr\",\"profilePageTitle\":\"ProfilePage_profilePageTitle__3gFyx\",\"profilePageUserNameTitle\":\"ProfilePage_profilePageUserNameTitle__170cN\",\"profilePageForm\":\"ProfilePage_profilePageForm__11FPy\",\"profilePageInput\":\"ProfilePage_profilePageInput__2kq26\",\"profilePageButton\":\"ProfilePage_profilePageButton__1qNPr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweetFormGroup\":\"CreateTweet_tweetFormGroup__3c_hV\",\"tweetForm\":\"CreateTweet_tweetForm__NLXXq\",\"tweetFormInput\":\"CreateTweet_tweetFormInput__3vgQd\",\"tweetFormAlert\":\"CreateTweet_tweetFormAlert__NzICj\",\"tweetFormButton\":\"CreateTweet_tweetFormButton__1QyfL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweetsListWrapper\":\"ListOfTweets_tweetsListWrapper__Wgdwl\",\"toastHeader\":\"ListOfTweets_toastHeader__xnl04\",\"toastBody\":\"ListOfTweets_toastBody__Psc3m\",\"tweetName\":\"ListOfTweets_tweetName__15Jae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarWrapper\":\"NavBar_navBarWrapper__2Syas\",\"navBar\":\"NavBar_navBar__3TH9t\"};","import React from 'react';\r\n\r\nconst AppContext = React.createContext({\r\n    userName: 'David',\r\n    tweets: [],\r\n    currentUserName: (newName) => { },\r\n    handleOnTweetSubmit: (value) => { }\r\n})\r\n\r\nexport default AppContext\r\n","import React from 'react';\r\n\r\nfunction LoadingIndicator(props) {\r\n    const { showLoading } = props;\r\n    return (\r\n        <div className=\"loader center\">\r\n            <i className=\"fa fa-cog fa-spin\" style={{ color: 'lightblue', display: showLoading ? 'block' : 'none' }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingIndicator\r\n","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyD1McotxXef3wsarLT5vmJ7RmwDikcrTGg\",\r\n    authDomain: \"react-twitter-app-davidbador.firebaseapp.com\",\r\n    databaseURL: \"https://react-twitter-app-davidbador.firebaseio.com\",\r\n    projectId: \"react-twitter-app-davidbador\",\r\n    storageBucket: \"react-twitter-app-davidbador.appspot.com\",\r\n    messagingSenderId: \"242298983492\",\r\n    appId: \"1:242298983492:web:c0b2f7b1e95c0f5d34d811\",\r\n    measurementId: \"G-W24TZJCTDV\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import firebase from '../Firestore';\r\nconst db = firebase.firestore();\r\n\r\nexport function getTweetsFirestore() {\r\n    return db.collection(\"tweets\").get()\r\n}\r\n\r\nexport async function sendTweetFirestore(msg, cbTurnOffSpinner, cbDisplayError) {\r\n    let response = await db.collection(\"tweets\").add(msg)\r\n    try {\r\n        cbTurnOffSpinner()\r\n        return response\r\n    } catch (error) {\r\n        return cbDisplayError(error)\r\n    }\r\n};","import React from 'react';\r\nimport { Button, Input, FormGroup, Form, Alert } from 'reactstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport styles from './CreateTweet.module.css';\r\nimport AppContext from '../AppContext';\r\nimport LoadingIndicator from './LoadingIndicator';\r\nimport { sendTweetFirestore } from '../lib/FirestoreConnection'\r\n\r\nclass CreateTweet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            showAlert: false,\r\n            buttonDisabled: false,\r\n            showLoading: false,\r\n            showModal: false,\r\n            modalText: '',\r\n        }\r\n        this.button = React.createRef();\r\n        this.updateText = this.updateText.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.turnOffLoader = this.turnOffLoader.bind(this);\r\n        this.displayError = this.displayError.bind(this);\r\n    }\r\n\r\n    static contextType = AppContext;\r\n    updateText = (event) => {\r\n        if (event.target.value.length <= 140) {\r\n            this.setState({ buttonDisabled: false, showAlert: false })\r\n        } else {\r\n            this.setState({ buttonDisabled: true, showAlert: true });\r\n        }\r\n        this.setState({ value: event.target.value })\r\n    }\r\n\r\n    handleModalShow = (error) => {\r\n        this.setState({ showModal: true, modalText: error });\r\n    }\r\n\r\n    handleModalClose = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    turnOffLoader = () => {\r\n        setTimeout(() => this.setState({ showLoading: false }), 1000)\r\n    }\r\n\r\n    displayError = (error) => {\r\n        this.handleModalShow(error)\r\n    }\r\n\r\n    handleOnSubmit = async (event, fc) => {\r\n        event.preventDefault();\r\n        const { value } = this.state;\r\n        const userRef = sendTweetFirestore({\r\n            content: value,\r\n            userName: this.context.userName,\r\n            date: new Date().toISOString()\r\n        }, this.turnOffLoader, this.displayError)\r\n        this.setState({ showLoading: true, value: '' });\r\n        setTimeout(() => fc(userRef), 1000)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                {appContext => (\r\n                    <div>\r\n                        <Form onSubmit={(event) => this.handleOnSubmit(event, appContext.handleOnTweetSubmit)}>\r\n                            <FormGroup className={styles.tweetFormGroup}>\r\n                                <div className={styles.tweetForm}>\r\n                                    <Input type=\"textarea\" name=\"text\" id=\"tweetTextArea\" value={this.state.value} className={styles.tweetFormInput} placeholder=\"What do you have in mind...\" onChange={this.updateText} />\r\n                                    <Modal show={this.state.showModal} onHide={this.handleModalClose} animation={false}>\r\n                                        <Modal.Header closeButton>\r\n                                            <Modal.Title>ERROR!</Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>{this.state.modalText}</Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"primary\" onClick={this.handleModalClose}>\r\n                                                Close\r\n                                            </Button>\r\n                                        </Modal.Footer>\r\n                                    </Modal>\r\n                                    <Alert color=\"danger\" className={styles.tweetFormAlert} style={{ display: this.state.showAlert ? \"block\" : \"none\" }}>The tweet can't contain more than 140 chars.</Alert>\r\n                                    <Button type=\"submit\" color=\"primary\" disabled={this.state.buttonDisabled} className={styles.tweetFormButton}>Tweet</Button>\r\n                                </div>\r\n                            </FormGroup>\r\n                        </Form>\r\n                        <LoadingIndicator showLoading={this.state.showLoading} />\r\n                    </div>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateTweet\r\n","import React from 'react';\r\nimport { Toast, ToastHeader, ToastBody } from 'reactstrap';\r\nimport styles from './ListOfTweets.module.css';\r\nimport AppContext from '../AppContext';\r\n\r\nfunction ListOfTweets() {\r\n    return (\r\n        <AppContext.Consumer>\r\n            {appContext => (\r\n                <div>\r\n                    {appContext.tweets.sort((a, b) => b.date > a.date ? 1 : -1).map((el, index) => <div className={styles.tweetsListWrapper}>\r\n                        <div key={index} className=\"p-3 my-2 rounded bg-dark\" style={{ width: \"50%\" }}>\r\n                            <Toast>\r\n                                <ToastHeader className={styles.toastHeader}>\r\n                                    <span className={styles.tweetName}>\r\n                                        {el.userName}\r\n                                    </span>\r\n                                    <span>\r\n                                        {el.date}\r\n                                    </span>\r\n                                </ToastHeader>\r\n                                <ToastBody className={styles.toastBody}>\r\n                                    {el.content}\r\n                                </ToastBody>\r\n                            </Toast>\r\n                        </div>\r\n                    </div>)}\r\n                </div>\r\n            )}\r\n        </AppContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ListOfTweets\r\n","import React from 'react';\r\nimport CreateTweet from './CreateTweet';\r\nimport ListOfTweets from './ListOfTweets';\r\n\r\nclass TweetsMainPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CreateTweet />\r\n                <ListOfTweets />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TweetsMainPage\r\n","import React from 'react';\r\nimport { Form, FormGroup, Input, Button } from 'reactstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport styles from './ProfilePage.module.css';\r\nimport AppContext from '../AppContext';\r\n\r\nclass ProfilePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            value: ''\r\n        }\r\n        this.updateUserName = this.updateUserName.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n    }\r\n\r\n    handleModalShow = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    handleModalClose = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    updateUserName = (event) => {\r\n        this.setState({ value: event.target.value })\r\n    }\r\n\r\n    submitUserName = (event, fc) => {\r\n        event.preventDefault()\r\n        if (this.state.value.length > 0) {\r\n            this.setState({ value: event.target.value });\r\n            fc(this.state.value)\r\n        } else {\r\n            this.handleModalShow()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                {appContext => (\r\n                    <div className={styles.profilePageWrapper} >\r\n                        <Form className={styles.profilePageForm} onSubmit={(event) => this.submitUserName(event, appContext.currentUserName)}>\r\n                            <FormGroup>\r\n                                <div className={styles.profilePageTitle}>Profile</div>\r\n                                <Modal show={this.state.showModal} onHide={this.handleModalClose} animation={false}>\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title>ERROR!</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>Please enter a User Name!</Modal.Body>\r\n                                    <Modal.Footer>\r\n                                        <Button variant=\"primary\" onClick={this.handleModalClose}>Close</Button>\r\n                                    </Modal.Footer>\r\n                                </Modal>\r\n                                <div className={styles.profilePageUserNameTitle}>User Name</div>\r\n                                <Input value={this.state.value} type=\"text\" className={styles.profilePageInput} onChange={this.updateUserName} />\r\n                                <Button type=\"submit\" className={styles.profilePageButton} color=\"primary\">Save</Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </div>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfilePage\r\n","import React from 'react';\r\nimport { Navbar, Nav, NavItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './NavBar.module.css';\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <div className={styles.navBarWrapper}>\r\n            <Navbar color=\"dark\" dark expand=\"md\" className={styles.navBar}>\r\n                <Nav>\r\n                    <NavItem>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/\">Home</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/profile\">Profile</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","\r\nimport React from 'react';\r\nimport TweetsMainPage from './Components/TweetsMainPage';\r\nimport ProfilePage from './Components/ProfilePage';\r\nimport NavBar from './Components/NavBar';\r\nimport './App.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport AppContext from './AppContext';\r\nimport { getTweetsFirestore } from './lib/FirestoreConnection';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userName: 'David',\r\n      tweets: [],\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    const savedName = localStorage.getItem('savedName');\r\n    const heldName = JSON.parse(savedName);\r\n    if (savedName) {\r\n      this.setState(() => ({ userName: heldName }))\r\n    } else {\r\n      this.setState(() => ({ userName: this.state.userName }))\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const local = this.state.userName;\r\n    localStorage.setItem('savedName', JSON.stringify(local))\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.loadTweets();\r\n    this.interval = setInterval(this.loadTweets, 60000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  loadTweets = async () => {\r\n    const response = await getTweetsFirestore()\r\n    const data = response.docs.map(doc => doc.data());\r\n    this.setState(\r\n      {\r\n        tweets: data\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          <NavBar />\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <AppContext.Provider value={{\r\n                userName: this.state.userName,\r\n                tweets: this.state.tweets,\r\n                handleOnTweetSubmit: (value) => {\r\n                  this.setState({ tweets: [value, ...this.state.tweets] })\r\n                  this.loadTweets()\r\n                }\r\n              }}>\r\n                <TweetsMainPage />\r\n              </AppContext.Provider>\r\n            </Route>\r\n            <Route path=\"/profile\" exact>\r\n              <AppContext.Provider value={{\r\n                userName: this.state.userName,\r\n                currentUserName: (newName) => {\r\n                  this.setState({ userName: newName })\r\n                }\r\n              }}>\r\n                <ProfilePage />\r\n              </AppContext.Provider>\r\n            </Route>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}