{"version":3,"sources":["Components/ProfilePage.module.css","Components/CreateTweet.module.css","Components/ListOfTweets.module.css","Components/NavBar.module.css","AppContext.js","Components/LoadingIndicator.jsx","Firestore.js","lib/FirestoreConnection.js","Components/CreateTweet.jsx","Components/ListOfTweets.jsx","Components/TweetsMainPage.jsx","Components/ProfilePage.jsx","Components/NavBar.jsx","Components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","user","userName","tweets","currentUserName","newName","handleOnTweetSubmit","value","LoadingIndicator","props","showLoading","className","style","color","display","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","storage","provider","GoogleAuthProvider","db","firestore","sendTweetFirestore","msg","cbTurnOffSpinner","cbDisplayError","a","collection","add","response","CreateTweet","updateText","event","target","length","setState","buttonDisabled","showAlert","handleModalShow","error","showModal","modalText","handleModalClose","turnOffLoader","setTimeout","displayError","componentWillMount","getName","doc","context","uid","get","then","name","data","handleOnSubmit","fc","preventDefault","state","content","date","Date","toISOString","userRef","showHome","button","createRef","bind","Consumer","appContext","Form","onSubmit","FormGroup","styles","tweetFormGroup","tweetForm","Input","type","id","tweetFormInput","placeholder","onChange","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Button","variant","onClick","Alert","tweetFormAlert","disabled","tweetFormButton","Component","contextType","ListOfTweets","sort","b","map","el","tweetsListWrapper","width","Toast","ToastHeader","toastHeader","tweetName","ToastBody","toastBody","TweetsMainPage","ProfilePage","handleFileChange","files","image","handleUpload","ref","put","on","snapshot","console","log","err","child","getDownloadURL","url","updateProfilePicture","getPicture","updateUserName","updateFireName","update","photo","submitUserName","profilePageWrapper","profilePageForm","profilePageTitle","profilePageUserNameTitle","profilePageInput","profilePageButton","src","alt","height","NavBar","navBarWrapper","Navbar","dark","expand","navBar","Nav","NavItem","exact","activeClassName","to","Login","email","password","handleEmailChange","handlePasswordChange","handleGoogleLogIn","handleLogin","handleSignup","signInWithEmailAndPassword","this","createUserWithEmailAndPassword","cred","set","signInWithPopup","displayName","photoURL","App","unsubscribe","componentDidMount","authListener","onAuthStateChanged","userAuth","loadTweets","onSnapshot","docs","savedName","localStorage","getItem","heldName","JSON","parse","setItem","stringify","Object","keys","Provider","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8e5ec15a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePageWrapper\":\"ProfilePage_profilePageWrapper__onBvr\",\"profilePageTitle\":\"ProfilePage_profilePageTitle__3gFyx\",\"profilePageUserNameTitle\":\"ProfilePage_profilePageUserNameTitle__170cN\",\"profilePageForm\":\"ProfilePage_profilePageForm__11FPy\",\"profilePageInput\":\"ProfilePage_profilePageInput__2kq26\",\"profilePageButton\":\"ProfilePage_profilePageButton__1qNPr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweetFormGroup\":\"CreateTweet_tweetFormGroup__3c_hV\",\"tweetForm\":\"CreateTweet_tweetForm__NLXXq\",\"tweetFormInput\":\"CreateTweet_tweetFormInput__3vgQd\",\"tweetFormAlert\":\"CreateTweet_tweetFormAlert__NzICj\",\"tweetFormButton\":\"CreateTweet_tweetFormButton__1QyfL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweetsListWrapper\":\"ListOfTweets_tweetsListWrapper__Wgdwl\",\"toastHeader\":\"ListOfTweets_toastHeader__xnl04\",\"toastBody\":\"ListOfTweets_toastBody__Psc3m\",\"tweetName\":\"ListOfTweets_tweetName__15Jae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarWrapper\":\"NavBar_navBarWrapper__2Syas\",\"navBar\":\"NavBar_navBar__3TH9t\"};","import React from 'react';\r\n\r\nconst AppContext = React.createContext({\r\n    user: {},\r\n    userName: '',\r\n    tweets: [],\r\n    currentUserName: (newName) => { },\r\n    handleOnTweetSubmit: (value) => { }\r\n})\r\n\r\nexport default AppContext\r\n","import React from 'react';\r\n\r\nfunction LoadingIndicator(props) {\r\n    const { showLoading } = props;\r\n    return (\r\n        <div className=\"loader center\">\r\n            <i className=\"fa fa-cog fa-spin\" style={{ color: 'lightblue', display: showLoading ? 'block' : 'none' }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingIndicator\r\n","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyD1McotxXef3wsarLT5vmJ7RmwDikcrTGg\",\r\n    authDomain: \"react-twitter-app-davidbador.firebaseapp.com\",\r\n    databaseURL: \"https://react-twitter-app-davidbador.firebaseio.com\",\r\n    projectId: \"react-twitter-app-davidbador\",\r\n    storageBucket: \"react-twitter-app-davidbador.appspot.com\",\r\n    messagingSenderId: \"242298983492\",\r\n    appId: \"1:242298983492:web:c0b2f7b1e95c0f5d34d811\",\r\n    measurementId: \"G-W24TZJCTDV\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\nexport const auth = firebase.auth()\r\n\r\nconst storage = firebase.storage();\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\nexport function signInWithGoogle() {\r\n    auth.signInWithPopup(provider).then(cred => {\r\n        return firebase.firestore().collection('users').doc(cred.user.uid).set({\r\n            uid: cred.user.uid,\r\n            userName: cred.user.displayName,\r\n            email: cred.user.email,\r\n            photo: cred.user.photoURL,\r\n        })\r\n    })\r\n}\r\n\r\nexport {\r\n    storage, firebase as default\r\n}\r\n","import firebase from '../Firestore';\r\nconst db = firebase.firestore();\r\n\r\nexport function getTweetsFirestore() {\r\n    return db.collection(\"tweets\").get()\r\n}\r\n\r\nexport async function sendTweetFirestore(msg, cbTurnOffSpinner, cbDisplayError) {\r\n    let response = await db.collection(\"tweets\").add(msg)\r\n    try {\r\n        cbTurnOffSpinner()\r\n        return response\r\n    } catch (error) {\r\n        return cbDisplayError(error)\r\n    }\r\n};","import React from 'react';\r\nimport { Button, Input, FormGroup, Form, Alert } from 'reactstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport styles from './CreateTweet.module.css';\r\nimport AppContext from '../AppContext';\r\nimport LoadingIndicator from './LoadingIndicator';\r\nimport { sendTweetFirestore } from '../lib/FirestoreConnection';\r\nimport firebase from '../Firestore';\r\n\r\nclass CreateTweet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            showAlert: false,\r\n            buttonDisabled: false,\r\n            showLoading: false,\r\n            showModal: false,\r\n            modalText: '',\r\n            name: '',\r\n            showHome: false,\r\n        }\r\n        this.button = React.createRef();\r\n        this.updateText = this.updateText.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.turnOffLoader = this.turnOffLoader.bind(this);\r\n        this.displayError = this.displayError.bind(this);\r\n        this.getName = this.getName.bind(this);\r\n    }\r\n\r\n    static contextType = AppContext;\r\n    updateText = (event) => {\r\n        if (event.target.value.length <= 140) {\r\n            this.setState({ buttonDisabled: false, showAlert: false })\r\n        } else {\r\n            this.setState({ buttonDisabled: true, showAlert: true });\r\n        }\r\n        this.setState({ value: event.target.value })\r\n    }\r\n\r\n    handleModalShow = (error) => {\r\n        this.setState({ showModal: true, modalText: error });\r\n    }\r\n\r\n    handleModalClose = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    turnOffLoader = () => {\r\n        setTimeout(() => this.setState({ showLoading: false }), 1000)\r\n    }\r\n\r\n    displayError = (error) => {\r\n        this.handleModalShow(error)\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.getName()\r\n    }\r\n\r\n    getName = () => {\r\n        firebase.firestore().collection('users').doc(this.context.user.uid).get().then((doc) => {\r\n            this.setState({ name: doc.data().userName })\r\n        })\r\n    }\r\n\r\n    handleOnSubmit = async (event, fc) => {\r\n        event.preventDefault();\r\n        const { value } = this.state;\r\n        const userRef = await sendTweetFirestore({\r\n            userName: this.state.name,\r\n            content: value,\r\n            date: new Date().toISOString()\r\n        }, this.turnOffLoader, this.displayError)\r\n        this.setState({ showLoading: true, value: '' });\r\n        setTimeout(() => fc(userRef), 1000)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                {appContext => (\r\n                    <div>\r\n                        <Form onSubmit={(event) => this.handleOnSubmit(event, appContext.handleOnTweetSubmit)}>\r\n                            <FormGroup className={styles.tweetFormGroup}>\r\n                                <div className={styles.tweetForm}>\r\n                                    <Input type=\"textarea\" name=\"text\" id=\"tweetTextArea\" value={this.state.value} className={styles.tweetFormInput} placeholder=\"What do you have in mind...\" onChange={this.updateText} />\r\n                                    <Modal show={this.state.showModal} onHide={this.handleModalClose} animation={false}>\r\n                                        <Modal.Header closeButton>\r\n                                            <Modal.Title>ERROR!</Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>{this.state.modalText}</Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"primary\" onClick={this.handleModalClose}>\r\n                                                Close\r\n                                            </Button>\r\n                                        </Modal.Footer>\r\n                                    </Modal>\r\n                                    <Alert color=\"danger\" className={styles.tweetFormAlert} style={{ display: this.state.showAlert ? \"block\" : \"none\" }}>The tweet can't contain more than 140 chars.</Alert>\r\n                                    <Button type=\"submit\" color=\"primary\" disabled={this.state.buttonDisabled} className={styles.tweetFormButton}>Tweet</Button>\r\n                                </div>\r\n                            </FormGroup>\r\n                        </Form>\r\n                        <LoadingIndicator showLoading={this.state.showLoading} />\r\n                    </div>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateTweet\r\n","import React from 'react';\r\nimport { Toast, ToastHeader, ToastBody } from 'reactstrap';\r\nimport styles from './ListOfTweets.module.css';\r\nimport AppContext from '../AppContext';\r\nimport firebase from '../Firestore';\r\n\r\nclass ListOfTweets extends React.Component {\r\n    static contextType = AppContext\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                {appContext => (\r\n                    <div>\r\n                        {appContext.tweets.sort((a, b) => b.date > a.date ? 1 : -1).map((el) => <div className={styles.tweetsListWrapper}>\r\n                            <div className=\"p-3 my-2 rounded bg-dark\" style={{ width: \"50%\" }}>\r\n                                <Toast>\r\n                                    <ToastHeader className={styles.toastHeader}>\r\n                                        <span className={styles.tweetName}>\r\n                                            {el.userName}\r\n                                        </span>\r\n                                        <span>\r\n                                            {el.date}\r\n                                        </span>\r\n                                    </ToastHeader>\r\n                                    <ToastBody className={styles.toastBody}>\r\n                                        {el.content}\r\n                                    </ToastBody>\r\n                                </Toast>\r\n                            </div>\r\n                        </div>)}\r\n                    </div>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListOfTweets\r\n","import React from 'react';\r\nimport CreateTweet from './CreateTweet';\r\nimport ListOfTweets from './ListOfTweets';\r\n\r\nclass TweetsMainPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CreateTweet />\r\n                <ListOfTweets />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TweetsMainPage\r\n","import React from 'react';\r\nimport { Form, FormGroup, Input, Button } from 'reactstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport styles from './ProfilePage.module.css';\r\nimport AppContext from '../AppContext';\r\nimport firebase from '../Firestore';\r\nimport { storage } from '../Firestore';\r\n\r\nclass ProfilePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            value: '',\r\n            image: '',\r\n            url: ''\r\n        }\r\n        this.updateUserName = this.updateUserName.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.updateFireName = this.updateFireName.bind(this);\r\n        this.handleFileChange = this.handleFileChange.bind(this);\r\n        this.handleUpload = this.handleUpload.bind(this);\r\n        this.updateProfilePicture = this.updateProfilePicture.bind(this);\r\n        this.getPicture = this.getPicture.bind(this);\r\n    }\r\n\r\n    static contextType = AppContext\r\n    handleModalShow = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    handleFileChange = (event) => {\r\n        if (event.target.files[0]) {\r\n            const image = event.target.files[0];\r\n            this.setState(() => ({ image }))\r\n        }\r\n    }\r\n\r\n    handleUpload = (event) => {\r\n        event.preventDefault()\r\n        const { image } = this.state\r\n        const uploadTask = storage.ref(`images/${image.name}`).put(image)\r\n        uploadTask.on('state_changed', (snapshot) => {\r\n            console.log(snapshot)\r\n        }, (err) => {\r\n            console.log(err)\r\n        }, () => {\r\n            storage.ref('images').child(image.name).getDownloadURL().then(url => {\r\n                this.setState({ url })\r\n                this.updateProfilePicture()\r\n            })\r\n        })\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.getPicture()\r\n        console.log(this.state.url)\r\n    }\r\n\r\n    handleModalClose = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    updateUserName = (event) => {\r\n        this.setState({ value: event.target.value })\r\n    }\r\n\r\n    updateFireName = () => {\r\n        firebase.firestore().collection('users').doc(this.context.user.uid).update({ userName: this.state.value })\r\n    }\r\n\r\n    updateProfilePicture = () => {\r\n        firebase.firestore().collection('users').doc(this.context.user.uid).update({ photo: this.state.url })\r\n    }\r\n\r\n    submitUserName = (event, fc) => {\r\n        event.preventDefault()\r\n        if (this.state.value.length > 0) {\r\n            this.setState({ value: event.target.value });\r\n            this.updateFireName()\r\n            fc(this.state.value)\r\n        } else {\r\n            this.handleModalShow()\r\n        }\r\n    }\r\n\r\n    getPicture = () => {\r\n        firebase.firestore().collection('users').doc(this.context.user.uid).get().then((doc) => {\r\n            console.log(doc.data().photo)\r\n            this.setState({ url: doc.data().photo })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                {appContext => (\r\n                    <div className={styles.profilePageWrapper} >\r\n                        <Form className={styles.profilePageForm} onSubmit={(event) => this.submitUserName(event, appContext.currentUserName)}>\r\n                            <FormGroup>\r\n                                <div className={styles.profilePageTitle}>Profile</div>\r\n                                <Modal show={this.state.showModal} onHide={this.handleModalClose} animation={false}>\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title>ERROR!</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>Please enter a User Name!</Modal.Body>\r\n                                    <Modal.Footer>\r\n                                        <Button variant=\"primary\" onClick={this.handleModalClose}>Close</Button>\r\n                                    </Modal.Footer>\r\n                                </Modal>\r\n                                <div className={styles.profilePageUserNameTitle}>User Name</div>\r\n                                <Input value={this.state.value} type=\"text\" className={styles.profilePageInput} onChange={this.updateUserName} />\r\n                                <Button type=\"submit\" className={styles.profilePageButton} color=\"primary\">Save</Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                        <Form onSubmit={this.handleUpload}>\r\n                            <FormGroup>\r\n                                <div>Upload Profile Picture</div>\r\n                                <Input type=\"file\" onChange={this.handleFileChange} />\r\n                                <Button color=\"primary\">Upload</Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                        <img src={this.state.url} alt=\"profile\" style={{width: '300px', height: '400px'}} />\r\n                    </div>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfilePage\r\n","import React from 'react';\r\nimport { Navbar, Nav, NavItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './NavBar.module.css';\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <div className={styles.navBarWrapper}>\r\n            <Navbar color=\"dark\" dark expand=\"md\" className={styles.navBar}>\r\n                <Nav>\r\n                    <NavItem>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/\">Home</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/profile\">Profile</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React, { Component } from 'react';\r\nimport firebase, { signInWithGoogle } from '../Firestore';\r\nimport { Form, FormGroup, Input, Button } from 'reactstrap';\r\nimport AppContext from '../AppContext';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n        }\r\n        this.handleEmailChange = this.handleEmailChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleGoogleLogIn = this.handleGoogleLogIn.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleSignup = this.handleSignup.bind(this);\r\n    }\r\n\r\n    static contextType = AppContext\r\n    handleLogin(event) {\r\n        event.preventDefault();\r\n        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\r\n    }\r\n\r\n    handleSignup(event) {\r\n        event.preventDefault();\r\n        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then(cred => {\r\n            return firebase.firestore().collection('users').doc(cred.user.uid).set({\r\n                uid: cred.user.uid,\r\n                userName: 'Anonymous',\r\n                email: this.state.email,\r\n                photo: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    handleGoogleLogIn(event) {\r\n        event.preventDefault();\r\n        signInWithGoogle()\r\n    }\r\n\r\n    handleEmailChange(event) {\r\n        this.setState({ email: event.target.value })\r\n    }\r\n\r\n    handlePasswordChange(event) {\r\n        this.setState({ password: event.target.value })\r\n    }\r\n\r\n    handleUserNameChange(event) {\r\n        this.setState({ userName: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <FormGroup>\r\n                    <div>Email</div>\r\n                    <Input type=\"email\" value={this.state.email} onChange={this.handleEmailChange} />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <div>Password</div>\r\n                    <Input type=\"password\" value={this.state.password} onChange={this.handlePasswordChange} />\r\n                </FormGroup>\r\n                <Button type=\"submit\" color=\"primary\" onClick={this.handleLogin}>Login</Button>\r\n                <Button color=\"primary\" onClick={this.handleSignup}>Signup</Button>\r\n                <Button color=\"primary\" onClick={this.handleGoogleLogIn}>Log in with Google</Button>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Login\r\n","\r\nimport React from 'react';\r\nimport TweetsMainPage from './Components/TweetsMainPage';\r\nimport ProfilePage from './Components/ProfilePage';\r\nimport NavBar from './Components/NavBar';\r\nimport Login from './Components/Login';\r\nimport './App.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport AppContext from './AppContext';\r\nimport firebase from './Firestore'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      userName: '',\r\n      tweets: [],\r\n    }\r\n  }\r\n\r\n  unsubscribe = null;\r\n\r\n  componentWillMount() {\r\n    const savedName = localStorage.getItem('savedName');\r\n    const heldName = JSON.parse(savedName);\r\n    savedName ? (this.setState(() => ({ userName: heldName }))) : (this.setState(() => ({ userName: this.state.userName })))\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem('savedName', JSON.stringify(this.state.userName))\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.authListener();\r\n    firebase.auth().onAuthStateChanged(userAuth => {\r\n      this.setState({ user: userAuth })\r\n    })\r\n    this.loadTweets();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribe()\r\n  }\r\n\r\n  authListener() {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      user ? (this.setState({ user })) : (this.setState({ user: null }))\r\n    })\r\n  }\r\n\r\n  loadTweets = async () => {\r\n    this.unsubscribe = firebase.firestore().collection('tweets').onSnapshot(snapshot => {\r\n      const data = snapshot.docs.map(doc => doc.data());\r\n      this.setState(\r\n        {\r\n          tweets: data\r\n        }\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          {this.state.user && Object.keys(this.state.user).length > 0 && <NavBar />}\r\n          <Switch>\r\n            <AppContext.Provider value={{\r\n              userName: this.state.userName || this.state.user.displayName,\r\n              tweets: this.state.tweets,\r\n              handleOnTweetSubmit: (value) => {\r\n                this.setState({ tweets: [value, ...this.state.tweets] })\r\n                this.loadTweets()\r\n              },\r\n              currentUserName: (newName) => {\r\n                this.setState({ userName: newName })\r\n              },\r\n              user: this.state.user\r\n            }}>\r\n              <Route path=\"/\" exact>\r\n                {this.state.user && Object.keys(this.state.user).length > 0 ? (<TweetsMainPage />) : (<Login />)}\r\n              </Route>\r\n              <Route path=\"/profile\" exact>\r\n                {this.state.user && Object.keys(this.state.user).length > 0 ? (<ProfilePage />) : (<Login />)}\r\n              </Route>\r\n            </AppContext.Provider>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}