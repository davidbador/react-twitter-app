{"version":3,"sources":["Components/Login.module.css","Components/ProfilePage.module.css","Components/CreateTweet.module.css","Components/ListOfTweets.module.css","Components/NavBar.module.css","AppContext.js","Components/LoadingIndicator.jsx","Firestore.js","lib/FirestoreConnection.js","Components/CreateTweet.jsx","Components/IndividualTweet.jsx","Components/ListOfTweets.jsx","Components/TweetsMainPage.jsx","Components/ProfilePage.jsx","Components/NavBar.jsx","Components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","user","userName","tweets","currentUserName","newName","handleOnTweetSubmit","value","LoadingIndicator","props","showLoading","className","style","color","display","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","storage","provider","GoogleAuthProvider","db","firestore","sendTweetFirestore","msg","cbTurnOffSpinner","cbDisplayError","a","collection","add","response","setTimeout","CreateTweet","useState","message","updateText","buttonDisabled","updateButton","showAlert","updateAlert","updateLoading","showModal","updateModal","modalText","updateModalText","context","useContext","handleModalClose","turnOffLoader","displayError","error","handleModalShow","handleOnSubmit","event","fc","preventDefault","uid","content","date","Date","toISOString","userRef","Consumer","appContext","Form","onSubmit","FormGroup","styles","tweetFormGroup","tweetForm","Input","type","name","id","tweetFormInput","placeholder","onChange","target","length","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Button","variant","onClick","Alert","tweetFormAlert","disabled","tweetFormButton","IndividualTweet","updateName","tweet","useEffect","undefined","doc","get","then","data","tweetsListWrapper","width","Toast","ToastHeader","toastHeader","tweetName","ToastBody","toastBody","ListOfTweets","sort","b","map","el","key","TweetsMainPage","ProfilePage","updateUserName","image","updateImage","url","updateURL","getPicture","handleFileChange","files","handleUpload","ref","put","on","snapshot","console","log","err","child","getDownloadURL","updateProfilePicture","update","photo","submitUserName","profilePageWrapper","profilePageForm","profilePageTitle","profilePageUserNameTitle","profilePageInput","profilePageButton","uploadTitle","uploadImageButton","src","alt","height","NavBar","navBarWrapper","Navbar","dark","expand","navBar","Nav","NavItem","exact","activeClassName","to","Login","email","updateEmail","password","updatePassword","loginWrapper","inputTitle","inputArea","buttonsWrapper","button","signInWithEmailAndPassword","createUserWithEmailAndPassword","cred","set","signInWithPopup","displayName","photoURL","App","unsubscribe","componentDidMount","authListener","onAuthStateChanged","userAuth","setState","loadTweets","onSnapshot","docs","state","savedName","localStorage","getItem","heldName","JSON","parse","this","setItem","stringify","Object","keys","Provider","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.74ede518.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__1_8fZ\",\"buttonsWrapper\":\"Login_buttonsWrapper__1rNqL\",\"button\":\"Login_button__2kOkb\",\"inputTitle\":\"Login_inputTitle__1r9y2\",\"inputArea\":\"Login_inputArea__1vBSS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePageWrapper\":\"ProfilePage_profilePageWrapper__onBvr\",\"profilePageTitle\":\"ProfilePage_profilePageTitle__3gFyx\",\"profilePageUserNameTitle\":\"ProfilePage_profilePageUserNameTitle__170cN\",\"profilePageForm\":\"ProfilePage_profilePageForm__11FPy\",\"profilePageInput\":\"ProfilePage_profilePageInput__2kq26\",\"profilePageButton\":\"ProfilePage_profilePageButton__1qNPr\",\"uploadTitle\":\"ProfilePage_uploadTitle__3ddrC\",\"uploadImageButton\":\"ProfilePage_uploadImageButton__2AusS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweetFormGroup\":\"CreateTweet_tweetFormGroup__3c_hV\",\"tweetForm\":\"CreateTweet_tweetForm__NLXXq\",\"tweetFormInput\":\"CreateTweet_tweetFormInput__3vgQd\",\"tweetFormAlert\":\"CreateTweet_tweetFormAlert__NzICj\",\"tweetFormButton\":\"CreateTweet_tweetFormButton__1QyfL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweetsListWrapper\":\"ListOfTweets_tweetsListWrapper__Wgdwl\",\"toastHeader\":\"ListOfTweets_toastHeader__xnl04\",\"toastBody\":\"ListOfTweets_toastBody__Psc3m\",\"tweetName\":\"ListOfTweets_tweetName__15Jae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarWrapper\":\"NavBar_navBarWrapper__2Syas\",\"navBar\":\"NavBar_navBar__3TH9t\"};","import React from 'react';\r\n\r\nconst AppContext = React.createContext({\r\n    user: {},\r\n    userName: '',\r\n    tweets: [],\r\n    currentUserName: (newName) => { },\r\n    handleOnTweetSubmit: (value) => { }\r\n})\r\n\r\nexport default AppContext\r\n","import React from 'react';\r\n\r\nfunction LoadingIndicator(props) {\r\n    const { showLoading } = props;\r\n    return (\r\n        <div className=\"loader center\">\r\n            <i className=\"fa fa-cog fa-spin\" style={{ color: 'lightblue', display: showLoading ? 'block' : 'none' }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingIndicator\r\n","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyD1McotxXef3wsarLT5vmJ7RmwDikcrTGg\",\r\n    authDomain: \"react-twitter-app-davidbador.firebaseapp.com\",\r\n    databaseURL: \"https://react-twitter-app-davidbador.firebaseio.com\",\r\n    projectId: \"react-twitter-app-davidbador\",\r\n    storageBucket: \"react-twitter-app-davidbador.appspot.com\",\r\n    messagingSenderId: \"242298983492\",\r\n    appId: \"1:242298983492:web:c0b2f7b1e95c0f5d34d811\",\r\n    measurementId: \"G-W24TZJCTDV\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\nexport const auth = firebase.auth()\r\n\r\nconst storage = firebase.storage();\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\nexport function signInWithGoogle() {\r\n    auth.signInWithPopup(provider).then(cred => {\r\n        return firebase.firestore().collection('users').doc(cred.user.uid).set({\r\n            uid: cred.user.uid,\r\n            userName: cred.user.displayName,\r\n            email: cred.user.email,\r\n            photo: cred.user.photoURL,\r\n        })\r\n    })\r\n}\r\n\r\nexport {\r\n    storage, firebase as default\r\n}\r\n","import firebase from '../Firestore';\r\nconst db = firebase.firestore();\r\n\r\nexport function getTweetsFirestore() {\r\n    return db.collection(\"tweets\").get()\r\n}\r\n\r\nexport async function sendTweetFirestore(msg, cbTurnOffSpinner, cbDisplayError) {\r\n    let response = await db.collection(\"tweets\").add(msg)\r\n    try {\r\n        cbTurnOffSpinner()\r\n        return setTimeout(() => response, 2000)\r\n    } catch (error) {\r\n        return cbDisplayError(error)\r\n    }\r\n};","import React, { useState, useContext } from 'react';\r\nimport { Button, Input, FormGroup, Form, Alert } from 'reactstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport styles from './CreateTweet.module.css';\r\nimport AppContext from '../AppContext';\r\nimport LoadingIndicator from './LoadingIndicator';\r\nimport { sendTweetFirestore } from '../lib/FirestoreConnection';\r\n\r\nconst CreateTweet = () => {\r\n    const [message, updateText] = useState('');\r\n    const [buttonDisabled, updateButton] = useState(false);\r\n    const [showAlert, updateAlert] = useState(false);\r\n    const [showLoading, updateLoading] = useState(false);\r\n    const [showModal, updateModal] = useState(false);\r\n    const [modalText, updateModalText] = useState('');\r\n\r\n    const context = useContext(AppContext);\r\n\r\n    const handleModalShow = (error) => {\r\n        updateModal(true);\r\n        updateModalText(error);\r\n    }\r\n\r\n    const handleModalClose = () => {\r\n        updateModal(false)\r\n    }\r\n\r\n    const turnOffLoader = () => {\r\n        setTimeout(() => updateLoading(false), 1000)\r\n    }\r\n\r\n    const displayError = (error) => {\r\n        handleModalShow(error)\r\n    }\r\n\r\n    const handleOnSubmit = async (event, fc) => {\r\n        event.preventDefault();\r\n        const userRef = await sendTweetFirestore({\r\n            uid: context.user.uid,\r\n            content: message,\r\n            date: new Date().toISOString()\r\n        }, turnOffLoader, displayError)\r\n        updateLoading(true);\r\n        updateText('');\r\n        setTimeout(() => fc(userRef), 1000)\r\n    }\r\n    return (\r\n        <AppContext.Consumer>\r\n            {appContext => (\r\n                <div>\r\n                    <Form onSubmit={(event) => handleOnSubmit(event, appContext.handleOnTweetSubmit)}>\r\n                        <FormGroup className={styles.tweetFormGroup}>\r\n                            <div className={styles.tweetForm}>\r\n                                <Input type=\"textarea\" name=\"text\" id=\"tweetTextArea\" value={message} className={styles.tweetFormInput} placeholder=\"What do you have in mind...\" onChange={event => {\r\n                                    if (event.target.value.length <= 140) {\r\n                                        updateText(event.target.value)\r\n                                        updateButton(false)\r\n                                        updateAlert(false)\r\n                                    } else {\r\n                                        updateText(event.target.value)\r\n                                        updateButton(true)\r\n                                        updateAlert(true)\r\n                                    }\r\n                                }} />\r\n                                <Modal show={showModal} onHide={handleModalClose} animation={false}>\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title>ERROR!</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>{modalText}</Modal.Body>\r\n                                    <Modal.Footer>\r\n                                        <Button variant=\"primary\" onClick={handleModalClose}>\r\n                                            Close\r\n                                        </Button>\r\n                                    </Modal.Footer>\r\n                                </Modal>\r\n                                <Alert color=\"danger\" className={styles.tweetFormAlert} style={{ display: showAlert ? \"block\" : \"none\" }}>The tweet can't contain more than 140 chars.</Alert>\r\n                                <Button type=\"submit\" color=\"primary\" disabled={buttonDisabled} className={styles.tweetFormButton}>Tweet</Button>\r\n                            </div>\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <LoadingIndicator showLoading={showLoading} />\r\n                </div>\r\n            )}\r\n        </AppContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default CreateTweet\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Toast, ToastHeader, ToastBody } from 'reactstrap';\r\nimport styles from './ListOfTweets.module.css';\r\nimport firebase from '../Firestore';\r\n\r\nconst IndividualTweet = (props) => {\r\n    const [name, updateName] = useState('');\r\n    const { tweet } = props\r\n\r\n    useEffect(() => {\r\n        if (tweet.uid !== undefined) {\r\n            firebase.firestore().collection('users').doc(tweet.uid).get().then((doc) => {\r\n                updateName(doc.data().userName)\r\n            })\r\n        }\r\n    }, [tweet.uid])\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.tweetsListWrapper}>\r\n                <div className=\"p-3 my-2 rounded bg-dark\" style={{ width: \"50%\" }}>\r\n                    <Toast>\r\n                        <ToastHeader className={styles.toastHeader}>\r\n                            <span className={styles.tweetName} >\r\n                                {name}\r\n                            </span>\r\n                            <span>\r\n                                {tweet.date}\r\n                            </span>\r\n                        </ToastHeader>\r\n                        <ToastBody className={styles.toastBody}>\r\n                            {tweet.content}\r\n                        </ToastBody>\r\n                    </Toast>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndividualTweet","import React from 'react';\r\nimport AppContext from '../AppContext';\r\nimport IndividualTweet from './IndividualTweet';\r\n\r\nconst ListOfTweets = () => {\r\n\r\n    return (\r\n        <AppContext.Consumer>\r\n            {appContext => (\r\n                <div>\r\n                    {appContext.tweets.sort((a, b) => b.date > a.date ? 1 : -1).map((el) => <IndividualTweet key={el.uid} tweet={el} />\r\n                    )}\r\n                </div>\r\n            )}\r\n        </AppContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ListOfTweets\r\n","import React from 'react';\r\nimport CreateTweet from './CreateTweet';\r\nimport ListOfTweets from './ListOfTweets';\r\n\r\nconst TweetsMainPage = () => {\r\n    return (\r\n        <div>\r\n            <CreateTweet />\r\n            <ListOfTweets />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TweetsMainPage\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { Form, FormGroup, Input, Button } from 'reactstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport styles from './ProfilePage.module.css';\r\nimport AppContext from '../AppContext';\r\nimport firebase from '../Firestore';\r\nimport { storage } from '../Firestore';\r\n\r\nconst ProfilePage = () => {\r\n    const [showModal, updateModal] = useState(false);\r\n    const [value, updateUserName] = useState('');\r\n    const [image, updateImage] = useState('');\r\n    const [url, updateURL] = useState('');\r\n\r\n    useEffect(() => {\r\n        getPicture()\r\n    })\r\n\r\n    const context = useContext(AppContext)\r\n\r\n    const handleModalShow = () => {\r\n        updateModal(true);\r\n    }\r\n\r\n    const handleFileChange = (event) => {\r\n        if (event.target.files[0]) {\r\n            const image = event.target.files[0];\r\n            updateImage(() => image)\r\n        }\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        event.preventDefault()\r\n        const uploadTask = storage.ref(`images/${context.user.uid}`).put(image)\r\n        uploadTask.on('state_changed', (snapshot) => {\r\n            console.log(snapshot)\r\n        }, (err) => {\r\n            console.log(err)\r\n        }, () => {\r\n            storage.ref('images').child(context.user.uid).getDownloadURL().then(url => {\r\n                updateURL(url)\r\n                updateProfilePicture()\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleModalClose = () => {\r\n        updateModal(false)\r\n    }\r\n\r\n    const updateFireName = () => {\r\n        firebase.firestore().collection('users').doc(context.user.uid).update({ userName: value })\r\n    }\r\n\r\n    const updateProfilePicture = () => {\r\n        firebase.firestore().collection('users').doc(context.user.uid).update({ photo: url })\r\n    }\r\n\r\n    const submitUserName = (event, fc) => {\r\n        event.preventDefault()\r\n        if (value.length > 0) {\r\n            updateUserName(event.target.value)\r\n            updateFireName()\r\n            fc(value)\r\n        } else {\r\n            handleModalShow()\r\n        }\r\n    }\r\n\r\n    const getPicture = () => {\r\n        firebase.firestore().collection('users').doc(context.user.uid).get().then((doc) => {\r\n            updateURL(doc.data().photo)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <AppContext.Consumer>\r\n            {appContext => (\r\n                <div className={styles.profilePageWrapper} >\r\n                    <Form className={styles.profilePageForm} onSubmit={(event) => submitUserName(event, appContext.currentUserName)}>\r\n                        <FormGroup>\r\n                            <div className={styles.profilePageTitle}>Profile</div>\r\n                            <Modal show={showModal} onHide={handleModalClose} animation={false}>\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title>ERROR!</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>Please enter a User Name!</Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button variant=\"primary\" onClick={handleModalClose}>Close</Button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                            <div className={styles.profilePageUserNameTitle}>User Name</div>\r\n                            <Input value={value} type=\"text\" className={styles.profilePageInput} onChange={event => updateUserName(event.target.value)} />\r\n                            <Button type=\"submit\" className={styles.profilePageButton} color=\"primary\">Save</Button>\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Form onSubmit={handleUpload}>\r\n                        <FormGroup>\r\n                            <div className={styles.uploadTitle}>Upload Profile Picture</div>\r\n                            <Input type=\"file\" onChange={handleFileChange} />\r\n                            <Button className={styles.uploadImageButton} color=\"primary\">Upload</Button>\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <img src={url} alt=\"profile\" style={{ width: '300px', height: '400px' }} />\r\n                </div>\r\n            )}\r\n        </AppContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ProfilePage\r\n","import React from 'react';\r\nimport { Navbar, Nav, NavItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './NavBar.module.css';\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <div className={styles.navBarWrapper}>\r\n            <Navbar color=\"dark\" dark expand=\"md\" className={styles.navBar}>\r\n                <Nav>\r\n                    <NavItem>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/\">Home</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/profile\">Profile</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React, { useState } from 'react';\r\nimport firebase, { signInWithGoogle } from '../Firestore';\r\nimport { Form, FormGroup, Input, Button } from 'reactstrap';\r\nimport styles from './Login.module.css';\r\n\r\nconst Login = () => {\r\n    const [email, updateEmail] = useState('');\r\n    const [password, updatePassword] = useState('');\r\n\r\n    const handleLogin = (event) => {\r\n        event.preventDefault();\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n    }\r\n\r\n    const handleSignup = (event) => {\r\n        event.preventDefault();\r\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(cred => {\r\n            return firebase.firestore().collection('users').doc(cred.user.uid).set({\r\n                uid: cred.user.uid,\r\n                userName: 'Anonymous',\r\n                email: email,\r\n                photo: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleGoogleLogIn = (event) => {\r\n        event.preventDefault();\r\n        signInWithGoogle()\r\n    }\r\n\r\n    return (\r\n        <Form className={styles.loginWrapper}>\r\n            <FormGroup>\r\n                <div className={styles.inputTitle}>Email</div>\r\n                <Input className={styles.inputArea} type=\"email\" value={email} onChange={event => updateEmail(event.target.value)} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <div className={styles.inputTitle}>Password</div>\r\n                <Input className={styles.inputArea} type=\"password\" value={password} onChange={event => updatePassword(event.target.value)} />\r\n            </FormGroup>\r\n            <div className={styles.buttonsWrapper}>\r\n                <Button className={styles.button} type=\"submit\" color=\"primary\" onClick={handleLogin}>Login</Button>\r\n                <Button className={styles.button} color=\"primary\" onClick={handleSignup}>Signup</Button>\r\n                <Button className={styles.button} color=\"primary\" onClick={handleGoogleLogIn}>Log in with Google</Button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","\r\nimport React from 'react';\r\nimport TweetsMainPage from './Components/TweetsMainPage';\r\nimport ProfilePage from './Components/ProfilePage';\r\nimport NavBar from './Components/NavBar';\r\nimport Login from './Components/Login';\r\nimport './App.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport AppContext from './AppContext';\r\nimport firebase from './Firestore'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      userName: '',\r\n      tweets: []\r\n    }\r\n  }\r\n\r\n  unsubscribe = null;\r\n\r\n  componentWillMount() {\r\n    const savedName = localStorage.getItem('savedName');\r\n    const heldName = JSON.parse(savedName);\r\n    savedName ? (this.setState(() => ({ userName: heldName }))) : (this.setState(() => ({ userName: this.state.userName })))\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem('savedName', JSON.stringify(this.state.userName))\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.authListener();\r\n    firebase.auth().onAuthStateChanged(userAuth => {\r\n      this.setState({ user: userAuth })\r\n    })\r\n    this.loadTweets();\r\n  }\r\n  \r\n  authListener() {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      user ? (this.setState({ user })) : (this.setState({ user: null }))\r\n    })\r\n  }\r\n\r\n  loadTweets = () => {\r\n    const unsubscribe = firebase.firestore().collection('tweets').onSnapshot(snapshot => {\r\n      const data = snapshot.docs.map(doc => doc.data());\r\n      this.setState(\r\n        {\r\n          tweets: data\r\n        }\r\n      )\r\n    })\r\n    return unsubscribe\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          {this.state.user && Object.keys(this.state.user).length > 0 && <NavBar />}\r\n          <Switch>\r\n            <AppContext.Provider value={{\r\n              userName: this.state.userName || this.state.user.displayName,\r\n              tweets: this.state.tweets,\r\n              handleOnTweetSubmit: (value) => {\r\n                this.setState({ tweets: [value, ...this.state.tweets] })\r\n                this.loadTweets()\r\n              },\r\n              currentUserName: (newName) => {\r\n                this.setState({ userName: newName })\r\n              },\r\n              user: this.state.user\r\n            }}>\r\n              <Route path=\"/\" exact>\r\n                {this.state.user && Object.keys(this.state.user).length > 0 ? (<TweetsMainPage />) : (<Login />)}\r\n              </Route>\r\n              <Route path=\"/profile\" exact>\r\n                {this.state.user && Object.keys(this.state.user).length > 0 ? (<ProfilePage />) : (<Login />)}\r\n              </Route>\r\n            </AppContext.Provider>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}