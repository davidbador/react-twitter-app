{"version":3,"sources":["Components/ProfilePage.module.css","Components/ListOfTweets.module.css","Components/NavBar.module.css","Components/CreateTweet.module.css","AppContext.js","lib/Api.js","Components/LoadingIndicator.jsx","Components/CreateTweet.jsx","Components/ListOfTweets.jsx","Components/TweetsMainPage.jsx","Components/ProfilePage.jsx","Components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","userName","tweets","currentUserName","newName","handleOnTweetSubmit","value","baseURL","sendTweet","msg","cbTurnOffSpinner","cbDisplayError","a","axios","post","response","LoadingIndicator","props","showLoading","className","style","color","display","CreateTweet","updateText","event","target","length","setState","buttonDisabled","showAlert","handleModalShow","error","showModal","modalText","handleModalClose","turnOffLoader","setTimeout","displayError","handleOnSubmit","fc","preventDefault","state","tweet","content","context","date","Date","toISOString","button","createRef","bind","Consumer","appContext","Form","onSubmit","FormGroup","alignItems","justifyContent","styles","tweetForm","Input","type","name","id","background","height","resize","placeholder","onChange","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Button","variant","onClick","Alert","position","bottom","left","disabled","right","Component","contextType","ListOfTweets","map","el","index","tweetsListWrapper","key","width","Toast","ToastHeader","textAlign","tweetName","ToastBody","marginTop","TweetsMainPage","ProfilePage","updateUserName","submitUserName","profilePageWrapper","profilePageTitle","profilePage","innerRef","NavBar","navBarWrapper","Navbar","dark","expand","navBar","Nav","NavItem","exact","activeClassName","to","App","componentDidMount","loadTweets","interval","setInterval","get","data","savedName","localStorage","getItem","heldName","JSON","parse","this","local","setItem","stringify","clearInterval","path","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.10257a50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePageWrapper\":\"ProfilePage_profilePageWrapper__onBvr\",\"profilePageTitle\":\"ProfilePage_profilePageTitle__3gFyx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweetsListWrapper\":\"ListOfTweets_tweetsListWrapper__Wgdwl\",\"tweetName\":\"ListOfTweets_tweetName__15Jae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarWrapper\":\"NavBar_navBarWrapper__2Syas\",\"navBar\":\"NavBar_navBar__3TH9t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweetForm\":\"CreateTweet_tweetForm__NLXXq\"};","import React from 'react';\r\n\r\nconst AppContext = React.createContext({\r\n    userName: 'David',\r\n    tweets: [],\r\n    currentUserName: (newName) => { },\r\n    handleOnTweetSubmit: (value) => { }\r\n})\r\n\r\nexport default AppContext\r\n","import axios from 'axios';\r\n\r\nconst baseURL = 'https://itc-bootcamp-19-dot-charcha-dev.appspot.com/';\r\n\r\nexport function getTweets() {\r\n    return axios.get(`${baseURL}/tweet`);\r\n};\r\n\r\nexport async function sendTweet(msg, cbTurnOffSpinner, cbDisplayError) {\r\n    let response = await axios.post(`${baseURL}/tweet`, msg);\r\n    try {\r\n        cbTurnOffSpinner()\r\n        return response\r\n    } catch(error) {\r\n        return cbDisplayError(error)\r\n    }\r\n};\r\n","import React from 'react';\r\n\r\nfunction LoadingIndicator(props) {\r\n    const { showLoading } = props;\r\n    return (\r\n        <div className=\"loader center\">\r\n            <i className=\"fa fa-cog fa-spin\" style={{ color: 'lightblue', display: showLoading ? 'block' : 'none' }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingIndicator\r\n","import React from 'react';\r\nimport { Button, Input, FormGroup, Form, Alert } from 'reactstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport styles from './CreateTweet.module.css';\r\nimport AppContext from '../AppContext';\r\nimport { sendTweet } from '../lib/Api';\r\nimport LoadingIndicator from './LoadingIndicator';\r\n\r\nclass CreateTweet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            showAlert: false,\r\n            buttonDisabled: false,\r\n            showLoading: false,\r\n            showModal: false,\r\n            modalText: '',\r\n        }\r\n        this.button = React.createRef();\r\n        this.updateText = this.updateText.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n        this.turnOffLoader = this.turnOffLoader.bind(this);\r\n        this.displayError = this.displayError.bind(this);\r\n    }\r\n\r\n    static contextType = AppContext;\r\n    updateText = (event) => {\r\n        if (event.target.value.length <= 140) {\r\n            this.setState({ buttonDisabled: false, showAlert: false })\r\n        } else {\r\n            this.setState({ buttonDisabled: true, showAlert: true });\r\n        }\r\n        this.setState({ value: event.target.value })\r\n    }\r\n\r\n    handleModalShow = (error) => {\r\n        this.setState({ showModal: true, modalText: error });\r\n    }\r\n\r\n    handleModalClose = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    turnOffLoader = () => {\r\n        setTimeout(() => this.setState({ showLoading: false }), 1000)\r\n    }\r\n\r\n    displayError = (error) => {\r\n        this.handleModalShow(error)\r\n    }\r\n\r\n    handleOnSubmit = async (event, fc) => {\r\n        event.preventDefault();\r\n        const { value } = this.state;\r\n        let response = await sendTweet(\r\n            {\r\n                tweet: {\r\n                    content: value,\r\n                    userName: this.context.userName,\r\n                    date: new Date().toISOString()\r\n                }\r\n            }, this.turnOffLoader, this.displayError\r\n        );\r\n        this.setState({ showLoading: true, value: '' });\r\n        setTimeout(() => fc(response), 1000)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                {appContext => (\r\n                    <div>\r\n                        <Form onSubmit={(event) => this.handleOnSubmit(event, appContext.handleOnTweetSubmit)}>\r\n                            <FormGroup style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                <div className={styles.tweetForm}>\r\n                                    <Input type=\"textarea\" name=\"text\" id=\"tweetTextArea\" value={this.state.value} style={{ background: 'black', color: 'white', height: '30vh', resize: \"none\" }} placeholder=\"What do you have in mind...\" onChange={this.updateText} />\r\n                                    <Modal show={this.state.showModal} onHide={this.handleModalClose} animation={false}>\r\n                                        <Modal.Header closeButton>\r\n                                            <Modal.Title>ERROR!</Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>{this.state.modalText}</Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"primary\" onClick={this.handleModalClose}>\r\n                                                Close\r\n                                            </Button>\r\n                                        </Modal.Footer>\r\n                                    </Modal>\r\n                                    <Alert color=\"danger\" style={{ position: 'absolute', bottom: 0, left: '1%', display: this.state.showAlert ? \"block\" : \"none\" }}>The tweet can't contain more than 140 chars.</Alert>\r\n                                    <Button type=\"submit\" color=\"primary\" disabled={this.state.buttonDisabled} style={{ position: 'absolute', bottom: '7%', right: '1%' }}>Tweet</Button>\r\n                                </div>\r\n                            </FormGroup>\r\n                        </Form>\r\n                        <LoadingIndicator showLoading={this.state.showLoading} />\r\n                    </div>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateTweet\r\n","import React from 'react';\r\nimport { Toast, ToastHeader, ToastBody } from 'reactstrap';\r\nimport styles from './ListOfTweets.module.css';\r\nimport AppContext from '../AppContext';\r\n\r\nfunction ListOfTweets() {\r\n    return (\r\n        <AppContext.Consumer>\r\n            {appContext => (\r\n                <div>\r\n                    {appContext.tweets.map((el, index) => <div className={styles.tweetsListWrapper}>\r\n                        <div key={index} className=\"p-3 my-2 rounded bg-dark\" style={{ width: \"50%\" }}>\r\n                            <Toast>\r\n                                <ToastHeader style={{ color: 'gray', textAlign: 'right', position: 'relative' }}>\r\n                                    <span className={styles.tweetName}>\r\n                                        {el.userName}\r\n                                    </span>\r\n                                    <span>\r\n                                        {el.date}\r\n                                    </span>\r\n                                </ToastHeader>\r\n                                <ToastBody style={{ color: 'white', textAlign: 'left', marginTop: '20px' }}>\r\n                                    {el.content}\r\n                                </ToastBody>\r\n                            </Toast>\r\n                        </div>\r\n                    </div>)}\r\n                </div>\r\n            )}\r\n        </AppContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default ListOfTweets\r\n","import React from 'react';\r\nimport CreateTweet from './CreateTweet';\r\nimport ListOfTweets from './ListOfTweets';\r\n\r\nclass TweetsMainPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CreateTweet />\r\n                <ListOfTweets />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TweetsMainPage\r\n","import React from 'react';\r\nimport { Form, FormGroup, Input, Button } from 'reactstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport styles from './ProfilePage.module.css';\r\nimport AppContext from '../AppContext';\r\n\r\nclass ProfilePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            value: ''\r\n        }\r\n        this.button = React.createRef();\r\n        this.updateUserName = this.updateUserName.bind(this);\r\n        this.handleModalShow = this.handleModalShow.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n    }\r\n\r\n    handleModalShow = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    handleModalClose = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    updateUserName = (event) => {\r\n        this.setState({ value: event.target.value })\r\n    }\r\n\r\n    submitUserName = (event, fc) => {\r\n        event.preventDefault()\r\n        if (this.state.value.length > 0) {\r\n            this.setState({ value: event.target.value });\r\n            fc(this.state.value)\r\n        } else {\r\n            this.handleModalShow()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContext.Consumer>\r\n                { appContext => (\r\n                    <div className={styles.profilePageWrapper} >\r\n                        <Form style={{ position: 'relative' }} onSubmit={(event) => this.submitUserName(event, appContext.currentUserName)}>\r\n                            <FormGroup>\r\n                                <div className={styles.profilePageTitle}>Profile</div>\r\n                                <Modal show={this.state.showModal} onHide={this.handleModalClose} animation={false}>\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title>ERROR!</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>Please enter a User Name!</Modal.Body>\r\n                                    <Modal.Footer>\r\n                                        <Button variant=\"primary\" onClick={this.handleModalClose}>Close</Button>\r\n                                    </Modal.Footer>\r\n                                </Modal>\r\n                                <div className={styles.profilePage}>User Name</div>\r\n                                <Input value={this.state.value} type=\"text\" style={{ width: '700px', background: 'black', color: 'white' }} onChange={this.updateUserName} />\r\n                                <Button type=\"submit\" style={{ position: \"absolute\", right: 0 }} color=\"primary\" innerRef={button => { this.button = button }}>Save</Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </div>\r\n                )}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfilePage\r\n","import React from 'react';\r\nimport { Navbar, Nav, NavItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './NavBar.module.css';\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <div className={styles.navBarWrapper}>\r\n            <Navbar color=\"dark\" dark expand=\"md\" className={styles.navBar}>\r\n                <Nav>\r\n                    <NavItem>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/\">Home</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink exact activeClassName=\"active\" to=\"/profile\">Profile</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","\r\nimport React from 'react';\r\nimport TweetsMainPage from './Components/TweetsMainPage';\r\nimport ProfilePage from './Components/ProfilePage';\r\nimport NavBar from './Components/NavBar';\r\nimport './App.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport AppContext from './AppContext';\r\nimport { getTweets } from './lib/Api';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userName: 'David',\r\n      tweets: [],\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    const savedName = localStorage.getItem('savedName');\r\n    const heldName = JSON.parse(savedName);\r\n    if (savedName) {\r\n      this.setState(() => ({ userName: heldName }))\r\n    } else {\r\n      this.setState(() => ({ userName: this.state.userName }))\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const local = this.state.userName;\r\n    localStorage.setItem('savedName', JSON.stringify(local))\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.loadTweets();\r\n    this.interval = setInterval(this.loadTweets, 60000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  loadTweets = async () => {\r\n    const response = await getTweets();\r\n    this.setState(\r\n      {\r\n        tweets: response.data.tweets\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          <NavBar />\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <AppContext.Provider value={{\r\n                userName: this.state.userName,\r\n                tweets: this.state.tweets,\r\n                handleOnTweetSubmit: (value) => {\r\n                  this.setState({ tweets: [value, ...this.state.tweets] })\r\n                  this.loadTweets()\r\n                }\r\n              }}>\r\n                <TweetsMainPage />\r\n              </AppContext.Provider>\r\n            </Route>\r\n            <Route path=\"/profile\" exact>\r\n              <AppContext.Provider value={{\r\n                userName: this.state.userName,\r\n                currentUserName: (newName) => this.setState({ userName: newName })\r\n              }}>\r\n                <ProfilePage />\r\n              </AppContext.Provider>\r\n            </Route>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}